{"version":3,"sources":["components/form/Form.jsx","App.js","reportWebVitals.js","index.js"],"names":["Form","state","name","number","handleChange","e","setState","currentTarget","value","onSubmit","preventDefault","props","propOnSubmit","reset","this","type","onChange","pattern","title","required","Component","App","contacts","idForContact","shortid","generate","formSubmitHendler","data","console","log","prevState","map","contact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uTAuDeA,E,4MAnDXC,MAAQ,CACPC,KAAM,GACLC,OAAO,I,EAEXC,aAAe,SAACC,GACd,EAAKC,SAAL,eACGD,EAAEE,cAAcL,KAAOG,EAAEE,cAAcC,S,EAK7CC,SAAW,SAACJ,GACTA,EAAEK,iBACD,EAAKC,MAAMC,aAAa,EAAKX,OAC9B,EAAKY,S,EAELA,MAAQ,WACJ,EAAKP,SAAU,CAClBJ,KAAM,GACLC,OAAO,M,4CAIT,WACI,MAAqBW,KAAKb,MAApBC,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,OACZ,OAAW,uBAAMM,SAAUK,KAAKL,SAArB,UACX,0CACJ,uBACFM,KAAK,OACDb,KAAK,OACLc,SAAUF,KAAKV,aACfI,MAAON,EACXe,QAAQ,yHACRC,MAAM,OACNC,UAAQ,OAEG,4CACT,uBACFJ,KAAK,OACDb,KAAK,SACLc,SAAUF,KAAKV,aACfI,MAAOL,EACXc,QAAQ,yFACRC,MAAM,OACNC,UAAQ,OAGF,wBAAQJ,KAAK,SAAb,gC,GAhDWK,aCmCJC,E,4MA/BbpB,MAAQ,CACNqB,SAAU,I,EAGZC,aAAeC,IAAQC,W,EAEvBC,kBAAoB,SAAAC,GAClBC,QAAQC,IAAIF,GACZ,EAAKrB,UAAS,SAAAwB,GAAS,MAAK,CAC1BR,SAAS,GAAD,mBAAMQ,EAAUR,UAAhB,CAA0BK,S,4CAItC,WAAU,IAAD,OACP,OACE,gCACE,4CACA,cAAC,EAAD,CAAMf,aAAcE,KAAKY,oBACzB,0CACCZ,KAAKb,MAAMqB,SAASS,KAAI,SAAAC,GACvB,OACE,8BACGA,EAAQ9B,KADX,IACkB8B,EAAQ7B,SADlB,EAAKoB,wB,GAtBPH,aCMHa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a5b54427.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Component } from \"react\";\r\n\r\nclass Form extends Component{\r\n    state = {\r\n     name: '',\r\n      number:''\r\n    }\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.currentTarget.name]: e.currentTarget.value\r\n    })\r\n  }\r\n \r\n\r\n onSubmit = (e) => {\r\n    e.preventDefault()\r\n     this.props.propOnSubmit(this.state)\r\n    this.reset()\r\n    }\r\n    reset = () => {\r\n        this.setState( {\r\n     name: '',\r\n      number:''\r\n    }) \r\n    }\r\n\r\n    render() {\r\n        const{name, number}= this.state\r\n        return  (  <form onSubmit={this.onSubmit}>\r\n        <label> Name\r\n    <input\r\n  type=\"text\"\r\n      name=\"name\"\r\n      onChange={this.handleChange}\r\n      value={name}\r\n  pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n  title=\"Name\"\r\n  required\r\n          /></label>\r\n             <label> Number\r\n    <input\r\n  type=\"text\"\r\n      name=\"number\"\r\n      onChange={this.handleChange}\r\n      value={number}\r\n  pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n  title=\"Name\"\r\n  required\r\n        /></label>\r\n\r\n        <button type=\"submit\">Add contact</button>\r\n      </form>)\r\n    }\r\n}\r\nexport default Form","import React from 'react';\nimport shortid from 'shortid';\nimport './App.css';\nimport { Component } from 'react';\nimport Form from './components/form/Form';\n\nclass App extends Component {\n  state = {\n    contacts: [],\n  };\n\n  idForContact = shortid.generate();\n\n  formSubmitHendler = data => {\n    console.log(data);\n    this.setState(prevState => ({\n      contacts: [...prevState.contacts, data],\n    }));\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Phoneboock</h1>\n        <Form propOnSubmit={this.formSubmitHendler} />\n        <h2>Contacts</h2>\n        {this.state.contacts.map(contact => {\n          return (\n            <p key={this.idForContact}>\n              {contact.name}:{contact.number}\n            </p>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}